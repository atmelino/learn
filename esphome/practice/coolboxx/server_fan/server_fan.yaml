substitutions:
  devicename: serverfan
  friendlyname: SERVERFAN
  fdevicename: ""
  ip: 192.168.0.178 # For static IP adressing

  # ssid: !secret wifi_ssid
  # password: !secret wifi_password
  ssid: "TP-LINK_MR3040_4B611E"
  password: ""

  # Connect your Dallas sensors with logger: DEBUG enabled (factory flash default).
  # Open the ESPHome webtool, connect to the ECB board, view the "Logs" window, hit "Reset",
  # and search for Dallas scan addresses and replace the below addresses with your unique ones.
  # Example Scan
  #[18:16:42][D][dallas.sensor:084]:     0x8b3ca8f64935b228 4
  #[18:16:42][D][dallas.sensor:084]:     0x783c0af6490d3628 2
  #[18:16:42][D][dallas.sensor:084]:     0xc13c01f09642c928 1
  #[18:16:42][D][dallas.sensor:084]:     0x043c6ef649772f28 3
  # dallasaddress1: "0xc13c01f09642c928"
  dallasaddress1: "0x910fc2d446308528"

esphome:
  name: ${devicename}
  friendly_name: ${friendlyname}

esp32:
  board: wemos_d1_mini32
  framework:
    type: esp-idf

preferences:
  flash_write_interval: 2min
  # flash_write_interval: 20s

wifi:
  ssid: ${ssid}
  password: ${password}

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${fdevicename}Fallback Hotspot
    password: "esphome1"
    manual_ip:
      static_ip: 192.168.100.2
      gateway: 192.168.100.2
      subnet: 255.255.255.0

ota:
  - platform: esphome
    password: "esphome1"

api:
  encryption:
    key: "itqzvhZMJj8wuTJX0GTOuL/ffESFROzUlmcO0u2+sfo=" #use your own HA generated Key
  reboot_timeout: 0s

web_server:
  port: 80
  version: 3
  local: true
  log: true

time:
  - platform: sntp
    id: current_time

debug:
  update_interval: 10s

logger:
  level: Debug

globals:
  - id: fan1_sum
    type: float
    restore_value: no
    initial_value: "0"
  - id: target1
    type: int
    restore_value: true
    initial_value: "26"
  - id: fan_set_speed1_glob
    type: float
    restore_value: no
    initial_value: "0"

number:
  - platform: template
    id: set_off_temp_1
    name: ${fdevicename}01 Fan 1 Off Temp
    optimistic: true
    min_value: 15
    max_value: 50
    initial_value: "15"
    step: 1
    restore_value: true
    unit_of_measurement: °C
    #device_class: "TEMPERATURE"
    #entity_category: "CONFIG"
    icon: mdi:temperature-celsius

  - platform: template
    id: set_full_temp_1
    name: ${fdevicename}02 Fan 1 Full Temp
    optimistic: true
    min_value: 50
    max_value: 100
    initial_value: "50"
    step: 1
    restore_value: true
    unit_of_measurement: °C
    #device_class: "TEMPERATURE"
    #entity_category: "CONFIG"
    icon: mdi:temperature-celsius

switch:
  - platform: restart
    name: ${fdevicename}Restart
    entity_category: "CONFIG"
    icon: mdi:restart

  # - platform: gpio
  #   name: ${fdevicename}Relay 0
  #   pin: GPIO18
  #   id: relay_0
  #   restore_mode: restore_default_off
  #   entity_category: "CONFIG"
  #   icon: mdi:power

  - platform: template
    id: auto_fan1
    name: ${fdevicename}Fan 1 Auto Mode
    restore_mode: ALWAYS_ON
    optimistic: true
    icon: mdi:fan-auto
    turn_off_action:
      then:
        lambda: |-
          auto calla = id(fan1_speed).turn_on();
          calla.set_speed(1);
          calla.perform();
          auto callb = id(fan1_speed).turn_off();
          callb.perform();
          auto callc = id(fan2_speed).turn_on();
          callc.set_speed(1);
          callc.perform();
          auto calld = id(fan2_speed).turn_off();
          calld.perform();

one_wire:
  - platform: gpio
    pin: GPIO27

output:
  - platform: ledc
    pin: GPIO13
    id: fan1
    frequency: 25600Hz
  - platform: ledc
    pin: GPIO14
    id: fan2
    frequency: 25600Hz

fan:
  - platform: speed
    output: fan1
    id: fan1_speed
    name: ${fdevicename}Fan 1 Speed
    #entity_category: "CONFIG"
    icon: mdi:fan
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: speed
    output: fan2
    id: fan2_speed
    name: ${fdevicename}Fan 2 Speed
    #entity_category: "CONFIG"
    icon: mdi:fan
    restore_mode: RESTORE_DEFAULT_OFF

i2c:
  - id: bus_a
    sda: GPIO21
    scl: GPIO22
    scan: True
    frequency: 400khz
  - id: bus_b
    sda: GPIO16
    scl: GPIO17
    scan: True
    frequency: 800khz

font:
  #  - file: "fonts/comic-sans-ms/ComicSansMS3.ttf"
  - file: "fonts/UbuntuMono/UbuntuMono-R.ttf"
    id: font_12
    size: 12
  - file: "fonts/UbuntuMono/UbuntuMono-R.ttf"
    id: font_16
    size: 16
  - file: "fonts/UbuntuMono/UbuntuMono-R.ttf"
    id: font_24
    size: 24

display:
  - platform: ssd1306_i2c
    i2c_id: bus_a
    #  address: 0x3D   # Sparkfun
    address: 0x3C # Generic
    model: "SSD1306 128x64"
    id: my_display
    pages:
      - id: page1
        lambda: |-
          it.printf(0, 0*12, id(font_24), "Temp: %.1f", id(Dallas_1).state);
          //it.printf(0, 0*12, id(font_24), "Temp: %.1f", id(SHT41T).state);
          it.printf(0, 2*12, id(font_12), "RPM: %.1f", id(fan1_RPM).state);
          it.printf(0, 3*12, id(font_12), "Fan Set   Speed %.0f %%", id(fan_set_speed1_glob));
          it.printf(0, 4*12, id(font_12), "Off %3.0fC  Full %3.0fC", id(set_off_temp_1).state, id(set_full_temp_1).state);

select:
  - platform: template
    name: ${fdevicename}Fan 1 Sensor
    id: fan_1_source
    icon: mdi:temperature-check
    optimistic: true
    restore_value: true
    options:
      - SHT41T
      - AHT20T
      - AHT20H
      - Dallas_1
    initial_option: SHT41T
    on_value:
      then:
        - globals.set:
            id: fan1_sum
            value: "0"

interval:
  - interval: 2000ms
    startup_delay: 2s
    then:
      #- display.page.show_next: my_display
      #- component.update: my_display
      # does not work : id(my_display).print(0, 0, id(font_12), "Hello");

      - lambda: !lambda |

          if (id(auto_fan1).state) {
            float actual_temp1=id(Dallas_1).state;
            //float actual_temp1=id(SHT41T).state;
            float fan_low_temp1=id(set_off_temp_1).state;
            float fan_high_temp1=id(set_full_temp_1).state;
            float fan_set_speed1;
            float range, exceed,fpercentage;  
            int percentage;  

            ESP_LOGD("main", "temp  actual %3.1f off %3.1f full %3.1f", actual_temp1,fan_low_temp1,fan_high_temp1);

            if (actual_temp1>=fan_low_temp1) {
              range=fan_high_temp1-fan_low_temp1;
              exceed=actual_temp1-fan_low_temp1;
              fpercentage=100.*exceed/range;
              percentage=(int)fpercentage;
              if(percentage>100)
                percentage=100;
              ESP_LOGD("main", "range= %f", range);            
              ESP_LOGD("main", "exceed= %f", exceed);            
              ESP_LOGD("main", "fpercentage= %f", fpercentage);            
              ESP_LOGD("main", "percentage= %d", percentage);            
              fan_set_speed1=percentage;
            }
            else
            {
              fan_set_speed1=0;
            }

            if (fan_set_speed1 <10) {
              fan_set_speed1 = 1;
              auto calloff1 = id(fan1_speed).turn_off();           
              calloff1.set_speed(fan_set_speed1);
              calloff1.perform();
              auto calloff2 = id(fan2_speed).turn_off();           
              calloff2.set_speed(fan_set_speed1);
              calloff2.perform();
            } else {
              auto call1 = id(fan1_speed).turn_on();
              call1.set_speed(fan_set_speed1);
              call1.perform();
              auto call2 = id(fan2_speed).turn_on();
              call2.set_speed(fan_set_speed1);
              call2.perform();
            }
            id(fan_set_speed1_glob)=fan_set_speed1;
          }

sensor:
  - platform: aht10
    i2c_id: bus_b
    address: 0x38
    variant: AHT20
    temperature:
      id: AHT20T
      name: ${fdevicename}AHT20 Temp
      device_class: "TEMPERATURE"
      icon: mdi:thermometer
      filters:
        - filter_out: NaN
        - offset: -6.0
    humidity:
      name: ${fdevicename}AHT20 Humidity
      id: AHT20H
      device_class: "HUMIDITY"
      icon: mdi:water-percent
    update_interval: 2s

  - platform: sht4x
    i2c_id: bus_a
    address: 0x44
    update_interval: 2s
    temperature:
      name: "Temperature"
      id: SHT41T
    humidity:
      name: "Relative Humidity"
      id: SHT41H

  - platform: dallas_temp
    address: ${dallasaddress1}
    id: Dallas_1
    name: ${fdevicename}Dallas Temp 1
    update_interval: 2s
    #index: 0
    filters:
      - filter_out: NaN
      - offset: 0.0
      #- lambda: return x * (9.0/5.0) + 32.0;
    unit_of_measurement: "°C"
    device_class: "TEMPERATURE"
    icon: mdi:thermometer

  - platform: pulse_counter
    pin: GPIO33
    id: fan1_RPM
    unit_of_measurement: "rpm"
    name: ${fdevicename}Fan 1 Monitor
    device_class: "SPEED"
    icon: mdi:fan
    update_interval: 5s
    filters:
      - multiply: 0.5

  - platform: rotary_encoder
    name: "Rotary Encoder"
    id: encoder1
    pin_a: GPIO05
    pin_b: GPIO23
    min_value: -20
    max_value: 20
    restore_mode: ALWAYS_ZERO 
    filters:
    - or:
        - debounce: 0.1s
        - delta: 2
    on_clockwise:
        - number.increment:
            id: set_off_temp_1
            cycle: false
        - logger.log:
            level: INFO
            format: "+ dir Encoder 1 step %3.1f"
            args: ["id(encoder1).state"]    
    on_anticlockwise:
        - number.decrement:
            id: set_off_temp_1
            cycle: false
        - logger.log:
            level: INFO
            format: "- dir Encoder 1 step %3.1f"
            args: ["id(encoder1).state"]    

  - platform: rotary_encoder
    name: "Rotary Encoder"
    id: encoder2
    pin_a: GPIO26
    pin_b: GPIO19
    min_value: -20
    max_value: 20
    restore_mode: ALWAYS_ZERO 
    filters:
    - or:
        - debounce: 0.1s
        - delta: 2
    on_clockwise:
        - number.increment:
            id: set_full_temp_1
            cycle: false
        - logger.log:
            level: INFO
            format: "+ dir Encoder 2 step %3.1f"
            args: ["id(encoder1).state"]    
    on_anticlockwise:
        - number.decrement:
            id: set_full_temp_1
            cycle: false
        - logger.log:
            level: INFO
            format: "- dir Encoder 2 step %3.1f"
            args: ["id(encoder1).state"]    

  - platform: wifi_signal
    name: ${fdevicename}WiFi
    entity_category: "DIAGNOSTIC"
    icon: mdi:wifi
    web_server:
      sorting_weight: 4
    update_interval: 30s

  - platform: uptime
    name: ${fdevicename}Uptime
    entity_category: "DIAGNOSTIC"
    icon: mdi:timer-sync-outline
    web_server:
      sorting_weight: 6
    update_interval: 10s

  - platform: debug
    free:
      name: ${fdevicename}Heap Free
      entity_category: "DIAGNOSTIC"
      web_server:
        sorting_weight: 9
    block:
      name: ${fdevicename}Heap Max Block
      entity_category: "DIAGNOSTIC"
      web_server:
        sorting_weight: 10
    loop_time:
      name: ${fdevicename}Loop Time
      entity_category: "DIAGNOSTIC"
      web_server:
        sorting_weight: 8

text_sensor:
  - platform: template
    name: ${fdevicename}Device Sensor
    entity_category: "DIAGNOSTIC"
    icon: mdi:devices
    web_server:
      sorting_weight: 14
    lambda: |-
      return {"ESP32 Control Board"};

  - platform: version
    name: ${fdevicename}Version
    entity_category: "DIAGNOSTIC"
    web_server:
      sorting_weight: 15

  - platform: wifi_info
    ip_address:
      name: ${fdevicename}IP Address
      entity_category: "DIAGNOSTIC"
      icon: mdi:ip
      web_server:
        sorting_weight: 0
    ssid:
      name: ${fdevicename}Connected SSID
      entity_category: "DIAGNOSTIC"
      icon: mdi:wifi
      web_server:
        sorting_weight: 2
    bssid:
      name: ${fdevicename}Connected BSSID
      entity_category: "DIAGNOSTIC"
      icon: mdi:wifi
      web_server:
        sorting_weight: 3
    mac_address:
      name: ${fdevicename}Mac Wifi Address
      entity_category: "DIAGNOSTIC"
      icon: mdi:wifi
      web_server:
        sorting_weight: 1

  - platform: debug
    #   device:
    #     name: ${fdevicename}Device Info
    reset_reason:
      name: ${fdevicename}Reset Reason
      entity_category: "DIAGNOSTIC"
